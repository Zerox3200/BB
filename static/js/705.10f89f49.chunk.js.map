{"version":3,"file":"static/js/705.10f89f49.chunk.js","mappings":"6NAUe,SAASA,EAAOC,GAA2C,IAA1C,WAAEC,EAAU,GAAEC,EAAE,WAAEC,EAAU,QAAEC,GAASJ,EACnE,MAAOK,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,GAE7CC,EAAmBC,EAAAA,GAAW,CAChCC,QAASD,EAAAA,KAAaE,SAAS,4BAC/BC,QAASH,EAAAA,KACJI,KAAK,YAAa,uCAAwCC,GACvDA,GAAS,CAAC,iBAAiBC,SAASD,EAAME,QAC7CH,KAAK,YAAa,yCACdC,GAAUA,GAASA,EAAMG,MAAQ,SAAYN,SAAS,qBAwB7DO,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXV,QAAS,GACTE,QAAS,IAEbJ,mBACAa,SAzBkBC,UAClBhB,GAAiB,GACjBH,GAAW,GACX,MAAMoB,EAAa,IAAIC,SACvBD,EAAWE,OAAO,WAAYC,EAAOhB,SACrCa,EAAWE,OAAO,UAAWC,EAAOd,eAC9Be,EAAAA,EAAMC,MAAM,GAADC,OAAIC,EAAAA,EAAQ,0BAAAD,OAAyB3B,GAAMqB,EAAY,CACpEQ,QAAS,CACLC,MAAOC,EAAAA,EAAkBC,IAAI,YAElCC,MAAMC,IAELjC,GAAW,GACXG,GAAiB,GACjBF,IACAH,GAAY,IACboC,OAAOC,IAAwB,GAAC,IAsBvC,OAAOC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACHF,EAAAA,EAAAA,KAACG,EAAAA,EAAOC,IAAG,CAACC,UAAU,WAAWC,QAAS,CAAEC,QAAS,GAAKC,QAAS,CAAED,QAAS,GAC1EE,WAAY,CAAEC,SAAU,GAAKjC,KAAM,UAAWyB,UAC9CS,EAAAA,EAAAA,MAACR,EAAAA,EAAOC,IAAG,CAACC,UAAU,OAAOC,QAAS,CAAEC,QAAS,GAAKC,QAAS,CAAED,QAAS,GACtEE,WAAY,CAAEC,SAAU,EAAGjC,KAAM,UAAWyB,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,uBAAsBH,UACjCF,EAAAA,EAAAA,KAACY,EAAAA,IAAiB,CAACC,QAASnD,OAEhCiD,EAAAA,EAAAA,MAAA,QAAMN,UAAU,OAAOvB,SAAUH,EAAOmC,aAAaZ,SAAA,EACjDF,EAAAA,EAAAA,KAAA,SAAOe,QAAQ,UAASb,SAAC,mBACzBF,EAAAA,EAAAA,KAAA,SAAOvB,KAAK,OAAO4B,UAAU,eAAeW,GAAG,UAAUC,KAAK,UAC1DC,SAAUvC,EAAOwC,aAAcC,OAAQzC,EAAO0C,aACjD1C,EAAO2C,OAAOnD,SAAWQ,EAAO4C,QAAQpD,SACrC6B,EAAAA,EAAAA,KAAA,OAAKK,UAAU,+BAA8BH,SAAEvB,EAAO2C,OAAOnD,UAAiB,MAElF6B,EAAAA,EAAAA,KAAA,SAAOe,QAAQ,UAASb,SAAC,yBACzBF,EAAAA,EAAAA,KAAA,SAAOvB,KAAK,OAAO4B,UAAU,eAAeW,GAAG,UAAUC,KAAK,UAC1DC,SAzBAM,IAChB,MAAMC,EAAYD,EAAME,OAAOC,MAAM,GACrChD,EAAOiD,cAAc,UAAWH,EAAU,IAwB7B9C,EAAO2C,OAAOjD,SAAWM,EAAO4C,QAAQlD,SACrC2B,EAAAA,EAAAA,KAAA,OAAKK,UAAU,+BAA8BH,SAAEvB,EAAO2C,OAAOjD,UAAiB,KAEjFP,GAAgBkC,EAAAA,EAAAA,KAAA,UAAQvB,KAAK,SAAS4B,UAAU,8BAA6BH,UAC1EF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,+BAEbL,EAAAA,EAAAA,KAAA,UAAQK,UAAU,WAAW5B,KAAK,SAAQyB,SAAC,oBAMnE,C","sources":["components/CategoriesCrud/Update/Preview/Preview.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { motion } from 'framer-motion'\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport './Preview.scss'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios'\r\nimport { reactLocalStorage } from 'reactjs-localstorage'\r\nimport { HostLink } from '../../../Host/Host'\r\n\r\nexport default function Preview({ HandleShow, ID, setLoading, refetch }) {\r\n    const [LoadingButton, setLoadingButton] = useState(false);\r\n\r\n    const validationSchema = Yup.object({\r\n        AppName: Yup.string().required(\"Add new name is required\"),\r\n        appicon: Yup.mixed()\r\n            .test(\"File_Type\", \"Category image should be svg only!!\", (value) =>\r\n                value && ['image/svg+xml'].includes(value.type))\r\n            .test(\"File_Size\", \"Image size should be less than 200 KB\",\r\n                (value) => value && value.size <= 200 * 1024).required(\"Category Image \")\r\n    })\r\n\r\n\r\n\r\n    const UpdateRequest = async (values) => {\r\n        setLoadingButton(true);\r\n        setLoading(true)\r\n        const UpdateForm = new FormData();\r\n        UpdateForm.append('Category', values.AppName);\r\n        UpdateForm.append('catIcon', values.appicon);\r\n        await axios.patch(`${HostLink}/Categories/UpdateCat/${ID}`, UpdateForm, {\r\n            headers: {\r\n                token: reactLocalStorage.get(\"token\")\r\n            }\r\n        }).then((res) => {\r\n            console.log(res);\r\n            setLoading(false);\r\n            setLoadingButton(false)\r\n            refetch();\r\n            HandleShow();\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    const Formik = useFormik({\r\n        initialValues: {\r\n            AppName: \"\",\r\n            appicon: \"\"\r\n        },\r\n        validationSchema,\r\n        onSubmit: UpdateRequest\r\n    })\r\n\r\n\r\n\r\n    const HandleIcon = (event) => {\r\n        const IconImage = event.target.files[0];\r\n        Formik.setFieldValue(\"appicon\", IconImage)\r\n    }\r\n\r\n\r\n\r\n\r\n    return <>\r\n        <motion.div className=\"popupCat\" initial={{ opacity: 0 }} animate={{ opacity: 1 }}\r\n            transition={{ duration: 0.8, type: 'spring' }}>\r\n            <motion.div className=\"form\" initial={{ opacity: 0 }} animate={{ opacity: 1 }}\r\n                transition={{ duration: 1, type: 'spring' }}>\r\n                <div className=\"close align-self-end\">\r\n                    <RiCloseCircleLine onClick={HandleShow} />\r\n                </div>\r\n                <form className='mt-5' onSubmit={Formik.handleSubmit}>\r\n                    <label htmlFor=\"AppName\">Category Name</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"AppName\" name=\"AppName\"\r\n                        onChange={Formik.handleChange} onBlur={Formik.handleBlur} />\r\n                    {Formik.errors.AppName && Formik.touched.AppName ?\r\n                        <div className=\"alert alert-danger py-2 mt-2\">{Formik.errors.AppName}</div> : null}\r\n\r\n                    <label htmlFor=\"appicon\">Upload New App Icon</label>\r\n                    <input type=\"file\" className=\"form-control\" id=\"appicon\" name=\"appicon\"\r\n                        onChange={HandleIcon} />\r\n                    {Formik.errors.appicon && Formik.touched.appicon ?\r\n                        <div className=\"alert alert-danger py-2 mt-2\">{Formik.errors.appicon}</div> : null\r\n                    }\r\n                    {LoadingButton ? <button type='button' className='btn bg-main text-light mt-2'>\r\n                        <i className='fas fa-spinner fa-spin '></i>\r\n                    </button> :\r\n                        <button className='btn mt-3' type='submit'>Submit</button>}\r\n                </form>\r\n            </motion.div>\r\n        </motion.div >\r\n    </>\r\n\r\n}\r\n"],"names":["Preview","_ref","HandleShow","ID","setLoading","refetch","LoadingButton","setLoadingButton","useState","validationSchema","Yup","AppName","required","appicon","test","value","includes","type","size","Formik","useFormik","initialValues","onSubmit","async","UpdateForm","FormData","append","values","axios","patch","concat","HostLink","headers","token","reactLocalStorage","get","then","res","catch","err","_jsx","_Fragment","children","motion","div","className","initial","opacity","animate","transition","duration","_jsxs","RiCloseCircleLine","onClick","handleSubmit","htmlFor","id","name","onChange","handleChange","onBlur","handleBlur","errors","touched","event","IconImage","target","files","setFieldValue"],"sourceRoot":""}